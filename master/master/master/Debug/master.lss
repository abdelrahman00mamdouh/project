
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000940  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e7  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c5  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "SPI.h"
#include "led.h"

int main(void)
 { Uint8t data=0;
	UART_Init();
  7c:	0e 94 67 00 	call	0xce	; 0xce <UART_Init>
	SPI_Init();
  80:	0e 94 5c 00 	call	0xb8	; 0xb8 <SPI_Init>
	
	while (1)
	{
		data=UART_Receive();
  84:	0e 94 6f 00 	call	0xde	; 0xde <UART_Receive>
		if(data=='1'){
  88:	81 33       	cpi	r24, 0x31	; 49
  8a:	21 f4       	brne	.+8      	; 0x94 <main+0x18>
			SPI_Transmit(7);
  8c:	87 e0       	ldi	r24, 0x07	; 7
  8e:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_Transmit>
  92:	f8 cf       	rjmp	.-16     	; 0x84 <main+0x8>
		}
			else if(data=='2'){
  94:	82 33       	cpi	r24, 0x32	; 50
  96:	21 f4       	brne	.+8      	; 0xa0 <main+0x24>
				SPI_Transmit(8);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_Transmit>
  9e:	f2 cf       	rjmp	.-28     	; 0x84 <main+0x8>
			}
			else if(data=='5'){
  a0:	85 33       	cpi	r24, 0x35	; 53
  a2:	21 f4       	brne	.+8      	; 0xac <main+0x30>
				SPI_Transmit(10);
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_Transmit>
  aa:	ec cf       	rjmp	.-40     	; 0x84 <main+0x8>
			}
			else if(data=='6'){
  ac:	86 33       	cpi	r24, 0x36	; 54
  ae:	51 f7       	brne	.-44     	; 0x84 <main+0x8>
				SPI_Transmit(11);
  b0:	8b e0       	ldi	r24, 0x0B	; 11
  b2:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_Transmit>
  b6:	e6 cf       	rjmp	.-52     	; 0x84 <main+0x8>

000000b8 <SPI_Init>:
  b8:	bd 9a       	sbi	0x17, 5	; 23
  ba:	be 98       	cbi	0x17, 6	; 23
  bc:	bf 9a       	sbi	0x17, 7	; 23
  be:	bc 9a       	sbi	0x17, 4	; 23
  c0:	83 e5       	ldi	r24, 0x53	; 83
  c2:	8d b9       	out	0x0d, r24	; 13
  c4:	08 95       	ret

000000c6 <SPI_Transmit>:
  c6:	8f b9       	out	0x0f, r24	; 15
  c8:	77 9b       	sbis	0x0e, 7	; 14
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <SPI_Transmit+0x2>
  cc:	08 95       	ret

000000ce <UART_Init>:
}
void UART_Transmit(Uint8t data)
{
	UDR = data;
	while(GET_BIT(UCSRA, TXC) != 1);
}
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	89 b9       	out	0x09, r24	; 9
  da:	10 bc       	out	0x20, r1	; 32
  dc:	08 95       	ret

000000de <UART_Receive>:
Uint8t UART_Receive(void)
{
	while(GET_BIT(UCSRA, RXC) != 1);
  de:	5f 9b       	sbis	0x0b, 7	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <UART_Receive>
	return UDR;
  e2:	8c b1       	in	r24, 0x0c	; 12
}
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
