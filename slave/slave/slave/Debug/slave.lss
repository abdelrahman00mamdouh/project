
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000552  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000552  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001982  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a93  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000daf  00000000  00000000  00002c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000388  00000000  00000000  00003a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f6  00000000  00000000  00003da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000997  00000000  00000000  00004396  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00004d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 14 02 	call	0x428	; 0x428 <main>
  7a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SETPIN_DIRECTION>:
#include "DIO.h"

/*pin functions*/
void DIO_SETPIN_DIRECTION(Uint8t port,Uint8t pin,Uint8t direction){
	
	switch (direction)
  82:	44 23       	and	r20, r20
  84:	19 f0       	breq	.+6      	; 0x8c <DIO_SETPIN_DIRECTION+0xa>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	c9 f1       	breq	.+114    	; 0xfc <DIO_SETPIN_DIRECTION+0x7a>
  8a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch (port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 f0       	breq	.+36     	; 0xb4 <DIO_SETPIN_DIRECTION+0x32>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SETPIN_DIRECTION+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	d9 f0       	breq	.+54     	; 0xcc <DIO_SETPIN_DIRECTION+0x4a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	29 f1       	breq	.+74     	; 0xe4 <DIO_SETPIN_DIRECTION+0x62>
  9a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA,pin);
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SETPIN_DIRECTION+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SETPIN_DIRECTION+0x22>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
			break;
  b2:	08 95       	ret
			
			case DIO_PORTB:
			CLR_BIT(DDRB,pin);
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SETPIN_DIRECTION+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SETPIN_DIRECTION+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	87 bb       	out	0x17, r24	; 23
			break;
  ca:	08 95       	ret
			
			case DIO_PORTC:
			CLR_BIT(DDRC,pin);
  cc:	24 b3       	in	r18, 0x14	; 20
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SETPIN_DIRECTION+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SETPIN_DIRECTION+0x52>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	84 bb       	out	0x14, r24	; 20
			break;
  e2:	08 95       	ret
			
			case DIO_PORTD:
			CLR_BIT(DDRD,pin);
  e4:	21 b3       	in	r18, 0x11	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SETPIN_DIRECTION+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SETPIN_DIRECTION+0x6a>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	81 bb       	out	0x11, r24	; 17
			break;
  fa:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port){
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	89 f0       	breq	.+34     	; 0x122 <DIO_SETPIN_DIRECTION+0xa0>
 100:	28 f0       	brcs	.+10     	; 0x10c <DIO_SETPIN_DIRECTION+0x8a>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	c9 f0       	breq	.+50     	; 0x138 <DIO_SETPIN_DIRECTION+0xb6>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	11 f1       	breq	.+68     	; 0x14e <DIO_SETPIN_DIRECTION+0xcc>
 10a:	08 95       	ret
			case DIO_PORTA:
			SET_BIT(DDRA,pin);
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SETPIN_DIRECTION+0x96>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SETPIN_DIRECTION+0x92>
 11c:	82 2b       	or	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
			break;
 120:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(DDRB,pin);
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SETPIN_DIRECTION+0xac>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SETPIN_DIRECTION+0xa8>
 132:	82 2b       	or	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
			break;
 136:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(DDRC,pin);
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SETPIN_DIRECTION+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SETPIN_DIRECTION+0xbe>
 148:	82 2b       	or	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
			break;
 14c:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(DDRD,pin);
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SETPIN_DIRECTION+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SETPIN_DIRECTION+0xd4>
 15e:	82 2b       	or	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_SETPIN_VALUE>:
		break;
	}
}
void DIO_SETPIN_VALUE(Uint8t port,Uint8t pin,Uint8t status){
	
	switch (status)
 164:	44 23       	and	r20, r20
 166:	19 f0       	breq	.+6      	; 0x16e <DIO_SETPIN_VALUE+0xa>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	c9 f1       	breq	.+114    	; 0x1de <DIO_SETPIN_VALUE+0x7a>
 16c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 f0       	breq	.+36     	; 0x196 <DIO_SETPIN_VALUE+0x32>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SETPIN_VALUE+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	d9 f0       	breq	.+54     	; 0x1ae <DIO_SETPIN_VALUE+0x4a>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	29 f1       	breq	.+74     	; 0x1c6 <DIO_SETPIN_VALUE+0x62>
 17c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA,pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SETPIN_VALUE+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SETPIN_VALUE+0x22>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
			break;
 194:	08 95       	ret
			
			case DIO_PORTB:
			CLR_BIT(PORTB,pin);
 196:	28 b3       	in	r18, 0x18	; 24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SETPIN_VALUE+0x3e>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SETPIN_VALUE+0x3a>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	88 bb       	out	0x18, r24	; 24
			break;
 1ac:	08 95       	ret
			
			case DIO_PORTC:
			CLR_BIT(PORTC,pin);
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SETPIN_VALUE+0x56>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SETPIN_VALUE+0x52>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
			break;
 1c4:	08 95       	ret
			
			case DIO_PORTD:
			CLR_BIT(PORTD,pin);
 1c6:	22 b3       	in	r18, 0x12	; 18
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SETPIN_VALUE+0x6e>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SETPIN_VALUE+0x6a>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	82 bb       	out	0x12, r24	; 18
			break;
 1dc:	08 95       	ret
		}
		break;
		
		case DIO_PIN_HIGH:
		switch(port){
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	89 f0       	breq	.+34     	; 0x204 <DIO_SETPIN_VALUE+0xa0>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_SETPIN_VALUE+0x8a>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c9 f0       	breq	.+50     	; 0x21a <DIO_SETPIN_VALUE+0xb6>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	11 f1       	breq	.+68     	; 0x230 <DIO_SETPIN_VALUE+0xcc>
 1ec:	08 95       	ret
			case DIO_PORTA:
			SET_BIT(PORTA,pin);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SETPIN_VALUE+0x96>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SETPIN_VALUE+0x92>
 1fe:	82 2b       	or	r24, r18
 200:	8b bb       	out	0x1b, r24	; 27
			break;
 202:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB,pin);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SETPIN_VALUE+0xac>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SETPIN_VALUE+0xa8>
 214:	82 2b       	or	r24, r18
 216:	88 bb       	out	0x18, r24	; 24
			break;
 218:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC,pin);
 21a:	25 b3       	in	r18, 0x15	; 21
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SETPIN_VALUE+0xc2>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SETPIN_VALUE+0xbe>
 22a:	82 2b       	or	r24, r18
 22c:	85 bb       	out	0x15, r24	; 21
			break;
 22e:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD,pin);
 230:	22 b3       	in	r18, 0x12	; 18
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SETPIN_VALUE+0xd8>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SETPIN_VALUE+0xd4>
 240:	82 2b       	or	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <LCD0_4Write_CMD>:
	{
		LCD0_4Write_CMD (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)					/* Write 8 byte for generation of 1 character */
		LCD0_4Write_CHR(msg[i]);
	}
}
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	9c 2f       	mov	r25, r28
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	89 2b       	or	r24, r25
 272:	8b bb       	out	0x1b, r24	; 27
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD0_4Write_CMD+0x3c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD0_4Write_CMD+0x42>
 288:	00 00       	nop
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 294:	2b b3       	in	r18, 0x1b	; 27
 296:	30 e1       	ldi	r19, 0x10	; 16
 298:	c3 9f       	mul	r28, r19
 29a:	c0 01       	movw	r24, r0
 29c:	11 24       	eor	r1, r1
 29e:	92 2f       	mov	r25, r18
 2a0:	9f 70       	andi	r25, 0x0F	; 15
 2a2:	89 2b       	or	r24, r25
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD0_4Write_CMD+0x6e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD0_4Write_CMD+0x74>
 2ba:	00 00       	nop
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 2c6:	8f e1       	ldi	r24, 0x1F	; 31
 2c8:	9e e4       	ldi	r25, 0x4E	; 78
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD0_4Write_CMD+0x84>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD0_4Write_CMD+0x8a>
 2d0:	00 00       	nop
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <LCD0_Init>:
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	63 e0       	ldi	r22, 0x03	; 3
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	65 e0       	ldi	r22, 0x05	; 5
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	66 e0       	ldi	r22, 0x06	; 6
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	67 e0       	ldi	r22, 0x07	; 7
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 31c:	83 e3       	ldi	r24, 0x33	; 51
 31e:	0e 94 23 01 	call	0x246	; 0x246 <LCD0_4Write_CMD>
 322:	82 e3       	ldi	r24, 0x32	; 50
 324:	0e 94 23 01 	call	0x246	; 0x246 <LCD0_4Write_CMD>
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 23 01 	call	0x246	; 0x246 <LCD0_4Write_CMD>
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 23 01 	call	0x246	; 0x246 <LCD0_4Write_CMD>
 334:	8c e0       	ldi	r24, 0x0C	; 12
 336:	0e 94 23 01 	call	0x246	; 0x246 <LCD0_4Write_CMD>
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 23 01 	call	0x246	; 0x246 <LCD0_4Write_CMD>
 340:	08 95       	ret

00000342 <LCD0_4Write_CHR>:
 342:	cf 93       	push	r28
 344:	c8 2f       	mov	r28, r24
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 364:	8b b3       	in	r24, 0x1b	; 27
 366:	9c 2f       	mov	r25, r28
 368:	90 7f       	andi	r25, 0xF0	; 240
 36a:	8f 70       	andi	r24, 0x0F	; 15
 36c:	89 2b       	or	r24, r25
 36e:	8b bb       	out	0x1b, r24	; 27
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 37a:	8f e9       	ldi	r24, 0x9F	; 159
 37c:	9f e0       	ldi	r25, 0x0F	; 15
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD0_4Write_CHR+0x3c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD0_4Write_CHR+0x42>
 384:	00 00       	nop
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 390:	2b b3       	in	r18, 0x1b	; 27
 392:	30 e1       	ldi	r19, 0x10	; 16
 394:	c3 9f       	mul	r28, r19
 396:	c0 01       	movw	r24, r0
 398:	11 24       	eor	r1, r1
 39a:	92 2f       	mov	r25, r18
 39c:	9f 70       	andi	r25, 0x0F	; 15
 39e:	89 2b       	or	r24, r25
 3a0:	8b bb       	out	0x1b, r24	; 27
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	63 e0       	ldi	r22, 0x03	; 3
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 3ac:	8f e9       	ldi	r24, 0x9F	; 159
 3ae:	9f e0       	ldi	r25, 0x0F	; 15
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD0_4Write_CHR+0x6e>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD0_4Write_CHR+0x74>
 3b6:	00 00       	nop
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 3c2:	8f e1       	ldi	r24, 0x1F	; 31
 3c4:	9e e4       	ldi	r25, 0x4E	; 78
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD0_4Write_CHR+0x84>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD0_4Write_CHR+0x8a>
 3cc:	00 00       	nop
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <LCD0_4WRITE_STRNG>:
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	ec 01       	movw	r28, r24
 3d8:	88 81       	ld	r24, Y
 3da:	88 23       	and	r24, r24
 3dc:	61 f0       	breq	.+24     	; 0x3f6 <LCD0_4WRITE_STRNG+0x24>
 3de:	21 96       	adiw	r28, 0x01	; 1
 3e0:	0e 94 a1 01 	call	0x342	; 0x342 <LCD0_4Write_CHR>
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	9c e9       	ldi	r25, 0x9C	; 156
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD0_4WRITE_STRNG+0x16>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD0_4WRITE_STRNG+0x1c>
 3ee:	00 00       	nop
 3f0:	89 91       	ld	r24, Y+
 3f2:	81 11       	cpse	r24, r1
 3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <LCD0_4WRITE_STRNG+0xe>
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <LCD0_CLR>:

void LCD0_CLR (void){
	
	LCD0_4Write_CMD(0x01);		/*clear screen*/
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 23 01 	call	0x246	; 0x246 <LCD0_4Write_CMD>
 402:	08 95       	ret

00000404 <led2_Init>:
}

void led2_Init	(void){
		/*define direction*/
		//SET_BIT (led2_DDR,led2_pin);
		DIO_SETPIN_DIRECTION (led2_port,led2_pin,led2_output);
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 40e:	08 95       	ret

00000410 <led2_ON>:
}
void led2_ON	(void){
		/*activate pin*/
	//	SET_BIT (led2_port,led2_pin);
	DIO_SETPIN_VALUE (led2_port,led2_pin,led2_output);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	63 e0       	ldi	r22, 0x03	; 3
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 41a:	08 95       	ret

0000041c <led2_OFF>:
}
void led2_OFF	(void){
	/*deactivate pin*/
	//CLR_BIT(led2_port,led2_pin);
	DIO_SETPIN_VALUE (led2_port,led2_pin,led2_LOW);
 41c:	40 e0       	ldi	r20, 0x00	; 0
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 426:	08 95       	ret

00000428 <main>:
#include "LCD.h"
#include "MOTOR.h"

int main(void)
{
	SPI_Init();
 428:	0e 94 9c 02 	call	0x538	; 0x538 <SPI_Init>
	led2_Init();
 42c:	0e 94 02 02 	call	0x404	; 0x404 <led2_Init>
	LCD0_Init();
 430:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD0_Init>
	MOTOR1_Init();
 434:	0e 94 75 02 	call	0x4ea	; 0x4ea <MOTOR1_Init>
	MOTOR1_ENABLE();
 438:	0e 94 85 02 	call	0x50a	; 0x50a <MOTOR1_ENABLE>
    /* Replace with your application code */
    while (1) 
	
    {	
		
		SPI_Receive();
 43c:	0e 94 a3 02 	call	0x546	; 0x546 <SPI_Receive>
	    data=SPI_Receive();
 440:	0e 94 a3 02 	call	0x546	; 0x546 <SPI_Receive>
	   switch (data){
 444:	88 30       	cpi	r24, 0x08	; 8
 446:	d9 f0       	breq	.+54     	; 0x47e <main+0x56>
 448:	18 f4       	brcc	.+6      	; 0x450 <main+0x28>
 44a:	87 30       	cpi	r24, 0x07	; 7
 44c:	31 f0       	breq	.+12     	; 0x45a <main+0x32>
 44e:	f6 cf       	rjmp	.-20     	; 0x43c <main+0x14>
 450:	8a 30       	cpi	r24, 0x0A	; 10
 452:	39 f1       	breq	.+78     	; 0x4a2 <main+0x7a>
 454:	8b 30       	cpi	r24, 0x0B	; 11
 456:	b9 f1       	breq	.+110    	; 0x4c6 <main+0x9e>
 458:	f1 cf       	rjmp	.-30     	; 0x43c <main+0x14>
		   case 7:
			LCD0_4WRITE_STRNG("led on");
 45a:	80 e6       	ldi	r24, 0x60	; 96
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD0_4WRITE_STRNG>
		    led2_ON();
 462:	0e 94 08 02 	call	0x410	; 0x410 <led2_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	81 ee       	ldi	r24, 0xE1	; 225
 46a:	94 e0       	ldi	r25, 0x04	; 4
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <main+0x44>
 474:	00 c0       	rjmp	.+0      	; 0x476 <main+0x4e>
 476:	00 00       	nop
			_delay_ms(100);
			LCD0_CLR();
 478:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD0_CLR>
	    break;
 47c:	df cf       	rjmp	.-66     	; 0x43c <main+0x14>
		 case 8:
			 LCD0_4WRITE_STRNG("led off");
 47e:	87 e6       	ldi	r24, 0x67	; 103
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD0_4WRITE_STRNG>
			 led2_OFF();
 486:	0e 94 0e 02 	call	0x41c	; 0x41c <led2_OFF>
 48a:	2f ef       	ldi	r18, 0xFF	; 255
 48c:	81 ee       	ldi	r24, 0xE1	; 225
 48e:	94 e0       	ldi	r25, 0x04	; 4
 490:	21 50       	subi	r18, 0x01	; 1
 492:	80 40       	sbci	r24, 0x00	; 0
 494:	90 40       	sbci	r25, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <main+0x68>
 498:	00 c0       	rjmp	.+0      	; 0x49a <main+0x72>
 49a:	00 00       	nop
			_delay_ms(100);
			LCD0_CLR();
 49c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD0_CLR>
		break;
 4a0:	cd cf       	rjmp	.-102    	; 0x43c <main+0x14>
		 	case 10:
			 	 LCD0_4WRITE_STRNG("motor one on");
 4a2:	8f e6       	ldi	r24, 0x6F	; 111
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD0_4WRITE_STRNG>
				  MOTOR1_CW();
 4aa:	0e 94 91 02 	call	0x522	; 0x522 <MOTOR1_CW>
 4ae:	2f ef       	ldi	r18, 0xFF	; 255
 4b0:	81 ee       	ldi	r24, 0xE1	; 225
 4b2:	94 e0       	ldi	r25, 0x04	; 4
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <main+0x8c>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <main+0x96>
 4be:	00 00       	nop
			 	 _delay_ms(100);
			 	 LCD0_CLR();
 4c0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD0_CLR>
		 	break;
 4c4:	bb cf       	rjmp	.-138    	; 0x43c <main+0x14>
			  	case 11:
				  	 LCD0_4WRITE_STRNG("motor one off");
 4c6:	8c e7       	ldi	r24, 0x7C	; 124
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD0_4WRITE_STRNG>
				  	MOTOR1_DISABLE();
 4ce:	0e 94 8b 02 	call	0x516	; 0x516 <MOTOR1_DISABLE>
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	81 ee       	ldi	r24, 0xE1	; 225
 4d6:	94 e0       	ldi	r25, 0x04	; 4
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	80 40       	sbci	r24, 0x00	; 0
 4dc:	90 40       	sbci	r25, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <main+0xb0>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <main+0xba>
 4e2:	00 00       	nop
				  	 _delay_ms(100);
				  	 LCD0_CLR();
 4e4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD0_CLR>
			  	break;
 4e8:	a9 cf       	rjmp	.-174    	; 0x43c <main+0x14>

000004ea <MOTOR1_Init>:
 */ 
#include "MOTOR.h"

void MOTOR1_Init	(void){
	
		DIO_SETPIN_DIRECTION(MOTOR_CNTRL_PORT,MOTOR_EN1,MOTOR_OUTPUT);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	64 e0       	ldi	r22, 0x04	; 4
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
		DIO_SETPIN_DIRECTION(MOTOR_DTA_PORT,MOTOR1_A1,MOTOR_OUTPUT);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
		DIO_SETPIN_DIRECTION(MOTOR_DTA_PORT,MOTOR1_A2,MOTOR_OUTPUT);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	64 e0       	ldi	r22, 0x04	; 4
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SETPIN_DIRECTION>
 508:	08 95       	ret

0000050a <MOTOR1_ENABLE>:
	
}

void MOTOR1_ENABLE  (void){
	
	DIO_SETPIN_VALUE(MOTOR_CNTRL_PORT,MOTOR_EN1,MOTOR_HIGH);
 50a:	41 e0       	ldi	r20, 0x01	; 1
 50c:	64 e0       	ldi	r22, 0x04	; 4
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 514:	08 95       	ret

00000516 <MOTOR1_DISABLE>:
	
}

void MOTOR1_DISABLE (void){
	
		DIO_SETPIN_VALUE(MOTOR_CNTRL_PORT,MOTOR_EN1,MOTOR_LOW);
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	64 e0       	ldi	r22, 0x04	; 4
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 520:	08 95       	ret

00000522 <MOTOR1_CW>:
	
}

void MOTOR1_CW		(void){
	
		DIO_SETPIN_VALUE(MOTOR_DTA_PORT,MOTOR1_A1,MOTOR_HIGH);
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	63 e0       	ldi	r22, 0x03	; 3
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
		DIO_SETPIN_VALUE(MOTOR_DTA_PORT,MOTOR1_A2,MOTOR_LOW);
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	64 e0       	ldi	r22, 0x04	; 4
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SETPIN_VALUE>
 536:	08 95       	ret

00000538 <SPI_Init>:
}
void SPI_Transmit(Uint8t data)
{
	SPDR = data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 538:	bd 98       	cbi	0x17, 5	; 23
 53a:	be 9a       	sbi	0x17, 6	; 23
 53c:	bf 98       	cbi	0x17, 7	; 23
 53e:	bc 98       	cbi	0x17, 4	; 23
 540:	83 e4       	ldi	r24, 0x43	; 67
 542:	8d b9       	out	0x0d, r24	; 13
 544:	08 95       	ret

00000546 <SPI_Receive>:
Uint8t SPI_Receive(void)
{
	while (GET_BIT(SPSR, SPIF) != 1);
 546:	77 9b       	sbis	0x0e, 7	; 14
 548:	fe cf       	rjmp	.-4      	; 0x546 <SPI_Receive>
	return SPDR;
 54a:	8f b1       	in	r24, 0x0f	; 15
}
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
